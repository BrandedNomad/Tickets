/**
 * @overview This file contains error handler middleware
 */

//import statements
import {NextFunction, Request,Response} from "express";
import {RequestValidationError} from "../errors/request-validation.error";
import {DatabaseConnectionError} from "../errors/database-connection.error";

//an array of error types
const errorTypes = [RequestValidationError, DatabaseConnectionError]

/**
 * @function errorHandler
 * @description This function handles errors generated by any of the route handlers
 * and ensures that all final error messages are normalized (have the same structure)
 * @param {Error | RequestValidationError | DatabaseConnectionError} err The error message thrown by the Error object
 * @param {Request} req The request object
 * @param {Response} res The response object
 * @param {NextFunction} next Function to be called when all is done.
 * @return {Response} The normalized error message with the structure: {errors:[{message:err.message}]}
 */
export const errorHandler = (
    err: Error,
    req: Request,
    res: Response,
    next: NextFunction
) => {
    //checks if error is a RequestValidationError and handles the error accordingly
    for(let i = 0; i < errorTypes.length; i++){
        if(err instanceof errorTypes[i] ){
            return res.status(err.statusCode).send({errors:err.serializeErrors()})
        }
    }


    // if(err instanceof RequestValidationError ){
    //     return res.status(err.statusCode).send({errors:err.serializeErrors()})
    // }
    //
    // //checks if error is a DatabaseConnectionError and handles the error accordingly
    // if(err instanceof DatabaseConnectionError){
    //     return res.status(err.statusCode).send({errors:err.serializeErrors()})
    // }

    //Any other type of error
    res.status(400).send({errors:[
            {message:"Something went wrong"}
    ]})

}
