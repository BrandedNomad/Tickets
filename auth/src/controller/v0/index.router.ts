/**
 * @overview This file contains an index for all available routes.
 *
 */

//imports
import express,{Router} from 'express';
import 'express-async-errors';
import currentuserRouter from './auth/routes/currentuser.router';
import signinRouter from './auth/routes/sign-in.router'
import signoutRouter from './auth/routes/sign-out.router'
import signupRouter from './auth/routes/sign-up.router'
import {errorHandler} from "../../middleware/error-handler.middleware";
import {NotFoundError} from "../../errors/not-found.error";


//Creating a router object
const indexRouter:Router = express.Router();

//Setting up user routes.

//IndexRouter automatically chooses the correct router, based on the URL provided
indexRouter.use('/user', currentuserRouter);
indexRouter.use('/user', signupRouter);
indexRouter.use('/user', signinRouter);
indexRouter.use('/user', signoutRouter);

//When url doesn't match any of the provided paths
//Throws a 404 not found error.
//To handle async errors, you could make it an async function and
//call the next() function at the end
//however I've opted to use the express-async-errors module
//which allows me to use the async keyword without having to call next
indexRouter.all('/user/*', async ()=>{
    throw new NotFoundError();
})

//NOTE: errorHandler is a middleware function (not a router)
//that handles any errors generated by any of the routes
indexRouter.use('/user', errorHandler);

//exports
export = indexRouter;
